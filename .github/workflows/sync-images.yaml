---
name: sync

on:
  push:
    branches:
      - main
    paths:
      - "issues/images-*"

jobs: 
  SyncedImages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - id: check_issue
        name: Check Issue
        run: |
          FILE=$(git diff --name-only HEAD~1)
          echo "::set-output name=exists::$( [ -f $FILE ] && echo true || echo false )"

      - name: Install oras
        if: steps.check_issue.outputs.exists == 'true'
        run: |
          VERSION="1.1.0"
          curl -LO "https://github.com/oras-project/oras/releases/download/v${VERSION}/oras_${VERSION}_linux_amd64.tar.gz"
          mkdir -p oras-install/
          tar -zxf oras_${VERSION}_*.tar.gz -C oras-install/
          sudo mv oras-install/oras /usr/local/bin/
          rm -rf oras_${VERSION}_*.tar.gz oras-install/
    
      - name: Get Issue ID
        if: steps.check_issue.outputs.exists == 'true'
        id: get_issue_id
        run: |
          FILE=$(git diff --name-only HEAD~1)
          id=$(echo "$FILE" | awk -F "-" '{print $2}' | awk '{$1=$1};1')
          echo "::set-output name=id::$id"

      - name: Sync Image
        if: steps.check_issue.outputs.exists == 'true'
        id: sync_image
        run: |
          FILE=$(git diff --name-only HEAD~1)
          while IFS= read -r line; do
            echo $line
            if [[ $line == *"=>"* ]]; then
                src=$(echo "$line" | awk -F "=>" '{print $1}' | awk '{$1=$1};1')
                dst=$(echo "$line" | awk -F "=>" '{print $2}' | awk '{$1=$1};1' | tr -d '\n' | tr -d '\r')
                if [[ $dst == *"aliyuncs.com"* ]]; then
                    oras copy  ${src} ${dst} --to-username ${{ secrets.ALIYUNCS_USERNAME }} --to-password ${{ secrets.ALIYUNCS_PASSWORD }}
                elif [[ $dst == *"huaweicloud.com"* ]]; then
                    oras copy  ${src} ${dst} --platform linux/amd64 --to-username ${{ secrets.HUAWEICLOUD_USERNAME }} --to-password ${{ secrets.HUAWEICLOUD_PASSWORD }}
                elif [[ $dst == *"docker.io"* ]]; then
                    oras copy  ${src} ${dst} --to-username ${{ secrets.DOCKERHUB_USERNAME }} --to-password ${{ secrets.DOCKERHUB_PASSWORD }}
                elif [[ $dst == *"hub.kubesphere.com.cn"* ]]; then
                    oras copy  ${src} ${dst} --to-username ${{ secrets.HUB_KUBESPHERE_USERNAME }} --to-password ${{ secrets.HUB_KUBESPHERE_PASSWORD }}
                elif [[ $dst == *"artifactory-public.com"* ]]; then
                    oras copy  ${src} ${dst} --to-username ${{ secrets.ARTIFACTORY_USERNAME }} --to-password ${{ secrets.ARTIFACTORY_PASSWORD }}
                elif [[ $src == *"dockerhub.qingcloud.com"* ]]; then
                    echo "oras copy  ${src} ${dst} --from-username ${{ secrets.QINGCLOUD_USERNAME }} --from-password ${{ secrets.QINGCLOUD_PASSWORD }} --to-username ${{ secrets.DOCKERHUB_USERNAME }} --to-password ${{ secrets.DOCKERHUB_PASSWORD }}"
                    oras copy  ${src} ${dst} --from-username ${{ secrets.QINGCLOUD_USERNAME }} --from-password ${{ secrets.QINGCLOUD_PASSWORD }} --to-username ${{ secrets.DOCKERHUB_USERNAME }} --to-password ${{ secrets.DOCKERHUB_PASSWORD }}
                fi
                echo " ${src} , ${dst} " >> SyncedImages.csv
            fi
          done < "$FILE"
          
      - name: Clean issues file
        if: always()
        run: |
          sudo rm -rf issues/images-*

      - name: Commit & Push changes
        if: always()
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Close Issue
        if: ${{ steps.sync_image.outcome }} == 'success' && ${{ steps.get_issue_id.outputs.id }} != '' && steps.check_issue.outputs.exists == 'true'
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ steps.get_issue_id.outputs.id }}
          comment: Auto-closing issue

      - name: Send WeChat Notification
        if: always()
        env:
          WECHAT_WEBHOOK: ${{ secrets.WECHAT_WEBHOOK }}
          STATUS: ${{ steps.sync_image.outcome }}
        run: |
          FILE=$(git diff --name-only HEAD~1)
          id=$(echo "$FILE" | awk -F "-" '{print $2}' | awk '{$1=$1};1')
          if [[ -n $id ]] && [[ ${{ steps.check_issue.outputs.exists }}=='true' ]]; then
              if [[ $STATUS == 'success' ]]; then
                 message="[issue-${{ steps.get_issue_id.outputs.id }}](https://github.com/CloudNativeTools/automated-scripts/issues/${{ steps.get_issue_id.outputs.id }}) 已关闭，镜像同步已完成，"
              else
                 message="镜像同步失败，请检查 [issue-${{ steps.get_issue_id.outputs.id }}](https://github.com/CloudNativeTools/automated-scripts/issues/${{ steps.get_issue_id.outputs.id }})"
              fi
              curl "${WECHAT_WEBHOOK}" \
                  -H 'Content-Type: application/json' \
                  -d '
                  {
                      "msgtype": "markdown",
                      "markdown": {
                        "content": "'"$message"'"
                      }
                  }'
          fi

   
